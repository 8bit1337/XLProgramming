REM SQUARE HUNTER
REM G$ holds the graphics, L$ has the X/Y locations for Players 0-3, P has the offsets in memory for Players from PMBASE
010 DIM G$(38),L$(14),P(5):B=ADR(G$):S=B+7:D=S+7:X1=ADR(L$):Y1=X1+7

REM G$="\Bat(0-6)            \Square(7-13)        \Dragon(14-37)                                                    "
020 G$="\81\81\C3\C3\FF\5A\66\00\00\1C\1C\1C\00\00\00\00\06\0F\F3\FE\0E\04\04\1E\3F\7F\E3\C3\C3\C7\FF\3C\08\8F\E1\3F\00\00"

REM There are 7 sets of X/Y coordinates below, listed like this:  1,2,3,4,1,2,3
REM I will choose a random number from 1-4, and start at that position in the string
REM The first X/Y will host the square, the remaining 3 will have bats
REM X1=56:X2=168:Y1=24:Y2=96 (in decimal)
030 L$="\38\38\A8\A8\38\38\A8\18\60\18\60\18\60\18"



REM N=Page for top of memory.  N*256 is beginning address for P/M Graphics
REM P=PMBASE, the Address in memory where P/M Graphics start.  The first 384 bytes are not used
032 GR.3:N=PEEK(106)-8:POKE 54279,N:P=N*256+384
REM Clear memory where P/M graphics reside
036 FOR I=0 TO 639:POKE P+I,0:NEXT I


REM Setup
040 POKE 559,46:REM DMACTL: Set to double resolution
050 POKE 53277,3:REM GRACTL: Enable P/M Graphics
055 POKE 623,16:REM Turn missiles into player 5 so that we can use a 5th colour
060 POKE 752,1:REM Turn the cursor off and clear the screen

REM set colours of everything
065 POKE 704,28:REM Yellow for Square
070 FOR I=705 TO 707:POKE I,0:NEXT I:REM Black for bats
075 POKE 711,72:REM Red for Dragon
080 POKE 712,10:REM Grey for PF
REM Draw rectangle around our playfield
085 COLOR 1:PLOT 0,0:DRAWTO 0,23:DRAWTO 33,23:DRAWTO 33,0:DRAWTO 0,0
090 POS. 35,1:?#6;"HW"
091 POS. 35,2:?#6;"W"


REM Starting X/Y coordinates for the dragon
130 XSTART=114:YSTART=52

REM Reset variables
300 J=0:X=XSTART:Y=YSTART

REM choose which location we're starting square at 
REM we multiply by 2 because we have X/Y pairs
310 Z=INT(PEEK(53770)/64)
REM set the square X (POKE) and Y (MOVE)
315 MOVE S,P+128+PEEK(Y1+Z),7:POKE 53248,PEEK(X1+Z)
REM Set the bats
320 FOR I=1 TO 3
322   MOVE B,P+128*(I+1)+PEEK(Y1+Z+I),7:POKE 53248+I,PEEK(X1+Z+I)
324 NEXT I


REM GAME LOOP
400 J=J+1


REM Display the Dragon
430 MOVE D,P+Y,24:POKE 53255,X:POKE 53254,X+2:POKE 53253,X+4:POKE 53252,X+6
431 POKE 656,0:POKE 657,0:?PEEK(53256);:?" ";:?PEEK(53257);:?" ";:?PEEK(53258);:?" ";:?PEEK(53259)
REM if any of these registers equal 1, they've hit the square.  If they're not 0 otherwise they hit a bat
432 POKE 53278,0:REM clear collision registers

REM Change the Dragon X/Y based on joystick
REM Joystick routine adapted from Kirk Gregg's routine in "Compute's Second Book of Atari"
REM The only reason I adapted it was to make it fewer characters
500 K=STICK(0)
510 DX=(K>4 AND K<8)-(K>8 AND K<12):ENDIF
520 DY=((K-5) MOD 4=0)-((K-6) MOD 4=0)
530 X=X+2*DX:Y=Y+2*DY


REM If user presses button, end game
800 IF STRIG(0)=0 THEN 990

980 G.400
990 POKE 752,0
999 END

REM The Peek addresses for the horizontal position of everything
REM HPOSP0=53248
REM HPOSP1=53249
REM HPOSP2=53250
REM HPOSP3=53251
REM HPOSM0=53252

REM GRAPHICS
REM      xx
REM     xxxx
REM xxxx  xx
REM xxxxxxx
REM     xxx
REM      x
REM      x
REM    xxxx
REM   xxxxxx
REM  xxxxxxx
REM xxx   xx
REM xx    xx
REM xx    xx
REM xx   xxx
REM xxxxxxxx
REM   xxxx
REM     x
REM x   xxxx
REM xxx    x
REM   xxxxxx

REM x
REM  x
REM   x  xx
REM    xxxxx
REM    x  xx
REM     xxx
REM    xxxx
REM   x  x
REM  x   x
REM x  xxxx
REM   xxxxxx
REM  xxxxxxx
REM xxx   xx
REM xx    xx
REM xx    xx
REM xx   xxx
REM xxxxxxxx
REM   xxxx
REM     x
REM x   xxxx
REM xxx    x
REM   xxxxxx

REM x      x /81
REM x      x /81
REM xx    xx /C3
REM xx    xx /C3
REM xxxxxxxx /FF
REM  x xx x  /5A
REM  xx  xx  /66





