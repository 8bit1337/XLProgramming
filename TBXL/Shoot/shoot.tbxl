

REM *** INITIALIZE ***
0 Q=256:L=240:DIM A$(64):A=ADR(A$):M=PEEK(106):N=M-16:POKE 106,N:GR. 18:S=DPEEK(88):R=(M-8)*Q:T=R+Q:X=T+Q:O=PEEK(756)*Q
1 POKE 756,N:N=N*Q:MOVE O,N,Q*4:A$="\60\60\60\7F\7F\60\60\60\06\06\06\FE\FE\06\06\06\00\FF\FF\18\18\18\18\18\18\18\18\18\18\FF\FF\00\00\00\01\01\01\01\01\E1\00\00\80\80\80\80\80\87\FD\1F\03\1F\FC\E0\00\00\BF\F8\C0\F8\3F\07\00\00":MOVE A,N+432,64
2 X=A+16:A$="\05\06\05\07\09\02\0A\02\0D\06\0D\07\09\0B\0A\0B\38\39\00\00\36\37\00\00\38\39\00\00\36\37\00\00"

REM *** BACKGROUND ***
3 POS. 0,0:?#6;"score":POS. 1,1:?#6;"0":POS. 15,0:?#6;"bases":POS. 17,1:?#6;"0":POS. 9,6:?#6;"Z[":POS. 9,7:?#6;"\]":MOVE S,R,L


REM *** WAIT FOR USER TO BE READY ***
4 WHILE STRIG(0)=1:WEND:B=3:MOVE R,S,L:C=10:I=0:P=0:GOS. 999

REM *** KERNAL ***
5 DO
6   I=I+1:IF I=C
      REM Before we move the ships, check for a potential collision
8     LOC. 8,6,Z:IF Z=0:LOC. 9,5,Z:IF Z=0:LOC. 11,6,Z:IF Z=0:LOC. 9,8,Z:ENDIF:ENDIF:ENDIF
9     IF Z<>0:B=B-1:POS. 17,1:?#6;B:IF B=0:EXIT:ENDIF:ENDIF
  
      REM Move the current layout to screen 2
10    MOVE S+40,T+20,200
  
      REM Move screen 2 back in it's new spot
11    MOVE T,S+40,80:MOVE T+103,S+104,4:MOVE T+112,S+121,4:MOVE T+123,S+124,4:MOVE T+132,S+142,4:MOVE T+140,S+160,80
  
      REM Add a new enemy
12    GOS. 999
    
13    I=0:IF C<>1:C=C-1:ENDIF
14  ENDIF

REM User Input
15  J=STICK(0)
16  IF J=11:E=125:F=128
17  ELSE : IF J=14:E=49:F=109
18  ELSE : IF J=7:E=131:F=134
19  ELSE : IF J=13:E=169:F=209: ENDIF : ENDIF : ENDIF : ENDIF
20  FOR I = F TO E STEP -1:IF PEEK(I)<>0:P=P+1:ENDIF:NEXT I
21  POS. 1,1:?#6;P

219 PAUSE 1000
220 LOOP

REM *** CLEAN UP ***
230 G. 4

997 POKE 106,M:GR. 0:END
998 END
999 W=4*INT(RAND(4)):POS. PEEK(A+W),PEEK(A+W+1):?#6;CHR$(PEEK(X+W)):POS. PEEK(A+W+2),PEEK(A+W+3):?#6;CHR$(PEEK(X+W+1))

REM ************** SCREEN **************
REM         01234567890123456789
REM   0( 0) SCORE          BASES 0  (0)
REM  20( 1)  0               0   20 (1)
REM  40( 2)          vw          40 (2)
REM  60(03)                      60 (3)
REM  80(04)                      80 (4)
REM 100(05)                      100(5)
REM 120(06)      x   z[   x      120(6)
REM 140(07)      y   \[   y      140(7)
REM 160(08)                      160(8)
REM 180(09)                      180(9)
REM 200(10)                      200(10)
REM 220(11)          vw          220(11)
REM         01234567890123456789
REM ************** SCREEN **************

REM ************* SCREEN T *************
REM         01234567890123456789
REM   0( 0)                      0  (0)
REM  20( 1)          vw          20 (1)
REM  40( 2)                      40 (2)
REM  60(03)                      60 (3)
REM  80(04)                      80 (4)
REM 100(05)      x   z[   x      100(5)
REM 120(06)      y   \[   y      120(6)
REM 140(07)                      140(7)
REM 160(08)                      160(8)
REM 180(09)                      180(9)
REM 200(10)          vw          200(10)
REM 220(11)                      220(11)
REM         01234567890123456789
REM ************* SCREEN  2*************

REM *** VARIABLES ***
REM A$= used to setup default X/Y positions of enemy ships and custom graphics
REM A = address of A$
REM B = number of bases remaining
REM C = countdown timer (i.e. how many loops before we move screen/add new enemy)
REM E = used to check for hits when shooting
REM F = used to check for hits when shooting
REM I = loop variable
REM J = position of Joystick 0
REM L = 240 (length of screen in memory)
REM M = top of memory address
REM N = new top of memory address/first address of new character set
REM O = first address of original character set
REM P = current score/points
REM Q = 256
REM R = first address of Reset screen
REM S = address where screen starts (240 characters)
REM T = first address of Temp screen
REM W = where a new target will appear next (L/U/R/D)
REM X = address for graphics of new enemy ships (L1L2/U1U2/R1R2/D1D2)
REM Z = used when looking for a collision