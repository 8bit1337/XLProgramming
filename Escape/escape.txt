REM *** PROGRAM START ***
100 ESC=28 : UP=14 : LEFT=11 : DOWN=13 : RIGHT=7 : SI=18
105 PLAYER = 1 : DOOR=4 : LASER1=7 : FUSEBOX1=10 : FUSE1=13 : KEYHOLE1=16
110 DIM CS$(88) : DIM STAGE(SI)

120 EXEC INITIALIZE
130 EXEC SETUP_PLAYFIELD

REM *** GAME LOOP ***
REM Put code here for RESTORE 9000 to bring data statements back to level 1, and setup the 'Press button to start' text

REM *** BEGIN STAGE ***
340 FOR I = 0 to SI : READ A : STAGE(I)=A : NEXT I
350 POSITION 2,3 : PRINT #6;STAGE(0)
360 FOR I = 1 to SI-2 STEP 3
370   POSITION STAGE(I+1), STAGE(I+2) : PRINT #6;CHR$(STAGE(I))
380 NEXT I
REM 1 = blue !, 65 = gray A

REM *** GAME LOOP ***
390 NEWX=STAGE(PLAYER+1) : NEWY=STAGE(PLAYER+2) : MOVED=1 : FIRST=1 : FIRE=0 : STARTTIME=TIME/60
400 EXEC MOVE_PLAYER

460 WHILE PEEK(764)<>ESC
470   CURRTIME = INT(TIME/60-STARTTIME)
480   EXEC UPDATE_PROGRESS
REM 490   EXEC CHECK_TRIGGER
REM 500   IF FIRE<>0:EXEC FIREPORTAL:ENDIF
510   EXEC CHECK_JOYSTICK
  
590   NADDR = SC+(20*NEWY+NEWX)
600   NVAL = PEEK(NADDR)

REM   -- Stage Complete! --
REM  IF NVAL=56 : stage completed!

REM   -- Player Dies! --
650   IF NVAL>=225 AND NVAL<=332 : REM -- character dies!
655     X = NEWX-2:IF X>6:X=6:ENDIF
656     Y = NEWY-1:IF Y<0:Y=0:ENDIF
660     POSITION X+8,Y:PRINT #6;"@!#?@!"
665     EXEC MOVE_PLAYER
670     WHILE PEEK(764)<>ESC:WEND
680     EXIT
690   ENDIF
      
REM   -- Can't Move Here --
700   IF NVAL>=33 AND NVAL<=122
710     NEWY=Y : NEWX = X : MOVED = 0
720   ENDIF  
  
730   EXEC MOVE_PLAYER

REM *** CLEAN UP ***
WEND
POKE 106,MEMTOP
GR.0
END

REM  *** INITIALIZE ***
5000 PROC INITIALIZE
REM    --- Move the top of memory back and set our memory addresses ---
5010   MEMTOP = PEEK(106)
5020   NEW_MEMTOP=MEMTOP-16
5030   POKE 106,NEW_MEMTOP
5040   GRAPHICS 2+16
5050   SC=DPEEK(96)
5060   CHRAM=NEW_MEMTOP
5080   CHROM=PEEK(756)
5090   POKE 756,CHRAM
5100   MOVE CHROM*256,CHRAM*256,1024

REM    --- Move game graphics into proper space in memory, in chunks to fit the characters being used
REM    --- These are in memory locations 2, 4-15, 26-30, 54-63. which are normally U-Z, are also graphics
5110   CS$="\7E\81\81\A5\7E\3C\7E\5A"
5120   MOVE ADR(CS$),CHRAM*256+(2)*8,8
5130   CS$="\7E\A5\81\81\7E\3C\7E\5A\7E\81\A9\81\7E\38\7C\54\7E\81\95\81\7E\1C\3E\2A\E7\E3\F1\38\1C\8F\C7\E7\E7\C7\8F\1C\38\F1\E3\E7\03\07\0E\1C\38\70\E0\C0\C0\E0\70\38\1C\0E\07\03\3C\18\81\C3\E7\E7\E7\E7\E7\E7\E7\E7\E7\81\18\3C\FC\F8\F1\03\03\F1\F8\FC\3F\1F\8F\C0\C0\8F\1F\3F\00\00\00\18\18\00\00\00"
5140   MOVE ADR(CS$),CHRAM*256+(4)*8,96
5150   CS$="\FF\99\81\C3\C3\81\99\FF\FF\99\81\DB\DB\81\99\FF\00\7E\5A\5A\18\18\18\18\18\18\18\18\5A\42\7E\00\00\0E\02\FA\FA\02\0E\00"
5160   MOVE ADR(CS$),CHRAM*256+(26)*8,40
5170   CS$="\E7\C3\99\BD\BD\AD\BD\BD\FB\FB\00\DF\DF\DF\00\FB\E7\C3\81\81\81\81\81\81\FF\E7\C3\C3\C3\C3\E7\FF\FF\FF\C3\81\81\C3\FF\FF\00\00\00\FF\FF\00\00\00\00\70\40\5F\5F\40\70\00\AA\55\AA\55\AA\55\AA\55\E7\81\BD\24\24\BD\81\E7\18\18\18\18\18\18\18\18"
5180   MOVE ADR(CS$),CHRAM*256+(54)*8,80

REM   --- Set colours:  upper=gray, lower=cyan, inverse upper = red/pink, inverse lower = brown ---
5190   POKE 708, 8
5200   POKE 709, 132
5210   POKE 710, 66
5220   POKE 711, 244
5230 ENDPROC

REM  *** SETUP_PLAYFIELD ***
5300 PROC SETUP_PLAYFIELD
5310   POSITION 1,0:PRINT #6;"\C5\D3\C3\C1\D0\C5"
5320   POSITION 1,2:PRINT #6;"stage"
5330   POSITION 1,5:PRINT #6;"steps"
5340   POSITION 1,8:PRINT #6;"clock"
5345   POSITION 1,11:PRINT #6;"&&&"
5350   FOR I = 8 to 18
5360     POSITION I,0:PRINT #6;"\F7"
5370     POSITION I,11:PRINT #6;"\F7"
5380   NEXT I
5390   FOR I = 1 to 10
5400     POSITION 8,I:PRINT #6;"\F7"
5410     POSITION 18,I:PRINT #6;"\F7"
5420   NEXT I
5430 ENDPROC

REM  *** UPDATE_PROGRESS ***
5600 PROC UPDATE_PROGRESS
5610   POSITION 2,9:PRINT #6;CURRTIME
5620   POSITION 2,6:PRINT #6;STEPS
5630 ENDPROC

REM   *** CHECK_TRIGGER ***
REM 5800 PROC CHECK_TRIGGER
REM   -- Button has been pushed --
REM      IF STRING(0)=0
REM        IF STICK(0)=LEFT
REM          FIRE=121
REM        IF STICK(0)=RIGHT
REM          FIRE=122
REM      ENDIF
REM ENDPROC

REM  *** FIREPORTAL ***
REM 6100 PROC FIREPORTAL
REM ENDPROC

REM  *** CHECK_JOYSTICK ***
6400 PROC CHECK_JOYSTICK
6410   IF STICK(0)=UP
6420     MOVED = 1 : NEWY=STAGE(PLAYER+2)-1 : STAGE(PLAYER)=36 : ENDIF
6430   IF STICK(0)=LEFT
6440     MOVED = 1 : NEWX=STAGE(PLAYER+1)-1 : STAGE(PLAYER)=37 : ENDIF
6450   IF STICK(0)=DOWN
6460     MOVED = 1 : NEWY=STAGE(PLAYER+2)+1 : STAGE(PLAYER)=34 : ENDIF
6470   IF STICK(0)=RIGHT
6480     MOVED = 1 : NEWX=STAGE(PLAYER+1)+1 : STAGE(PLAYER)=38 : ENDIF
6490 ENDPROC

REM  *** MOVE_PLAYER ***
6700 PROC MOVE_PLAYER
6710   IF MOVED = 1
6720     IF FIRST = 0 : REMark -- Print the old character in the spot the player is moving from
6730       POKE UADDR,UVAL
6740       STEPS = STEPS + 1
6770     ELSE
6780       FIRST = 0
6790     ENDIF

REM      -- Store whatever is currently at NEWX/NEWY in U$ so that we can re-show it later
6800     UADDR = SC+(20*NEWY+NEWX)
6820     UVAL = PEEK(UADDR)

REM      -- Print the appropriate player graphic at NEWX/NEWY
6830     POSITION NEWX,NEWY : PRINT #6;CHR$(STAGE(PLAYER))
6840     X=NEWX:Y=NEWY

6850     MOVED = 0
6860   ENDIF
6870 ENDPROC


REM *** STAGE INFORMATION ***
REM   STAGE,PLAYER,DOOR,LASER1,FUSEBOX1,FUSE1,KEYHOLE1
REM 9001 DATA 1,1,14,10,214,16,0,16,11,7,13,11,8,12,12,8,21,11,2
9001 DATA 1,36,14,10,247,16,0,61,11,7,58,11,8,47,12,8,222,11,2