REM *********************************
REM *********************************
REM ESCAPE (or maybe Cosmic Cages?)
REM ---------------------------------
REM by Jason "8BIT 1337" Gruetzmacher
REM *********************************
REM *********************************

REM *********************
REM *** PROGRAM START ***
REM *********************
100 ESC=28 : UP=14 : LEFT=11 : DOWN=13 : RIGHT=7
110 DIM CS$(88) : DIM LIVES$(1) : DIM LEVEL$(39) : DIM LASER(2) : DIM POWER(2)

120 EXEC INITIALIZE
130 EXEC SETUP_PLAYFIELD
140 EXEC ATTRACT_MODE

REM ******************
REM *** START GAME ***
REM ******************
150 EXEC PRESENT_LEVEL

REM *** GAME LOOP ***
160 WHILE PEEK(764)<>ESC
170   CURRTIME = INT(TIME/60-STARTTIME)
180   EXEC UPDATE_PROGRESS
190   EXEC CHECK_LASERS
200   EXEC CHECK_TRIGGER : IF FIRE<>0 : EXEC FIRE_PORTAL : ENDIF
210   EXEC CHECK_JOYSTICK : IF NEWXY<>0 : EXEC CHECK_PLAYER : ENDIF
220   IF GAMEOVER=1 : EXIT : ENDIF
230 WEND

REM *** CLEAN UP ***
240 IF GAMEOVER=1 : GOTO BEGIN_STAGE : ENDIF
250 POKE 106,MEMTOP
260 GR.0
270 END

REM *********************
REM *** PRESENT_LEVEL ***
REM *********************
1000 PROC PRESENT_LEVEL
1010   POSITION 2,3 : PRINT #6;LEVEL
1020   GOSUB 10000+LEVEL
1030   SCLVL=ADR(LEVEL$)

REM    The first group are the player and door, which every level must have
1040   POKE SC+PEEK(SCLVL+1),PEEK(SCLVL)
1050   POKE SC+PEEK(SCLVL+3),PEEK(SCLVL+2)

REM    The second group are objects, which may or may not exist
1060   FOR I= 4 to 22 STEP 2
1070     CHR=PEEK(SCLVL+I) : XY=PEEK(SCLVL+I+1)
1080     IF CHR<>0 : POKE SC+XY,CHR : ENDIF
1090   NEXT I

REM    The third group are the lasers, which we capture along with their power source XY coords
1100   FOR I=24 to 31 STEP 3
1110     CHR=PEEK(SCLVL+I) : XY=PEEK(SCLVL+I+1) : POW=PEEK(SCLVL+I+2)
1120     IF CHR<>0 : J=I/3-8 : POKE SC+XY,CHR : LASER(J)=XY : POWER(J)=POW : ENDIF
1130   NEXT I

REM    The last group are hazards, which are XY coords plus Width and Heights
1140   FOR I=33 to 36 STEP 3
1150     XY = PEEK(SCLVL+I)
1160     IF XY<>0
1170       X = PEEK(SCLVL+I+1) : Y=PEEK(SCLVL+I+2)
1180       FOR J=1 TO X : FOR K=1 TO Y : POKE SC+XY+20*(K-1)+(J-1), 9 : NEXT K : NEXT J
1190     ENDIF
1200   NEXT I

1210   XY=PEEK(SCLVL+1) : NEWXY=0 : FIRE=0
1220 ENDPROC
 

REM ***********************
REM *** UPDATE_PROGRESS ***
REM ***********************
2000 PROC UPDATE_PROGRESS
2010   POSITION 2,9:PRINT #6;CURRTIME
2020   POSITION 2,6:PRINT #6;STEPS
2030   FOR I = 1 TO 6
2040     IF I<=LIVES : LIVES$="&" : ELSE : LIVES$=" " : ENDIF
2050     POSITION I,11:PRINT #6;LIVES$
2060   NEXT I
2070 ENDPROC

REM *********************
REM  *** CHECK_LASERS ***
REM *********************
2200 PROC CHECK_LASERS
2210   I=0
2220 ENDPROC

REM ***********************
REM   *** CHECK_TRIGGER ***
REM ***********************
5200 PROC CHECK_TRIGGER
5210   IF STRIG(0)=0
5220     IF STICK(0)=LEFT : FIRE=121
5230     ELSE : IF STICK(0)=RIGHT : FIRE=122
5240     ENDIF : ENDIF
5250   ENDIF
5290 ENDPROC

REM ********************
REM  *** FIRE_PORTAL ***
REM ********************
5500 PROC FIRE_PORTAL
5510   I=0
5520 ENDPROC

REM ***********************
REM  *** CHECK_JOYSTICK ***
REM ***********************
5800 PROC CHECK_JOYSTICK
5810   IF STICK(0)=UP : NEWXY=-20 : NEWP=4
5820     ELSE : IF STICK(0)=LEFT : NEWXY=-1 : NEWP=5
5830     ELSE : IF STICK(0)=DOWN : NEWXY=+20 : NEWP=2
5840     ELSE : IF STICK(0)=RIGHT : NEWXY=+1 : NEWP=5
5850   ENDIF : ENDIF : ENDIF : ENDIF
5860 ENDPROC

REM *******************
REM *** CHECK_PLAYER ***
REM *******************
6100 PROC CHECK_PLAYER
6130   CHECK1 = PEEK(SC+XY+NEWXY)

6140   IF CHECK1=248 : EXEC COMPLETE_STAGE
6150     ELSE : IF CHECK1=0 : EXEC MOVE_PLAYER
6160     ELSE : IF CHECK1<=49 OR CHECK1=59 : EXEC PUSH_BLOCK
6170     ELSE : IF CHECK1<=58 : EXEC USE_PORTAL
6180     ELSE : IF CHECK1<=191 : EXEC LOSE_LIFE
6190     ELSE : NEWXY=0
6200   ENDIF : ENDIF : ENDIF : ENDIF : ENDIF
6210 ENDPROC

REM *******************
REM *** MOVE_PLAYER ***
REM *******************
6300 PROC MOVE_PLAYER
6310   POKE SC+XY, 0
6320   POKE SC+XY+NEWXY, NEWP
6340   XY=XY+NEWXY : NEWXY=0 : STEPS=STEPS+1
6350 ENDPROC

REM *****************
REM *** LOSE_LIFE ***
REM *****************
6400 PROC LOSE_LIFE
6410   LIVES = LIVES - 1
6430   POSITION 1,11 : PRINT #6;"@!#?@!"
6440   NEWXY=0
6450   IF LIVES = 0 : GAMEOVER = 1 : ENDIF
6460   WHILE STRIG(0)<>0:WEND
6470 ENDPROC

REM ******************
REM *** USE_PORTAL ***
REM ******************
6600 PROC ENTER_PORTAL
6610   I = 0
6620 ENDPROC

REM ******************
REM *** USE_PORTAL ***
REM ******************
6700 PROC USE_PORTAL
6710   I = 0
6720 ENDPROC

REM ******************
REM *** PUSH_BLOCK ***
REM ******************
6900 PROC PUSH_BLOCK
6920   CHECK2=PEEK(SC+XY+2*NEWXY)

6930   IF CHECK2=0 : EXEC MOVE_BLOCK : EXEC MOVE_PLAYER
6940     ELSE : IF CHECK1=49 AND CHECK2=26 : EXEC ADD_FUSE : EXEC MOVE_PLAYER
6950     ELSE : IF CHECK2=57 OR CHECK2=58 : EXEC USE_PORTAL : EXEC MOVE_PLAYER
6960     ELSE : IF CHECK2>=137 AND CHECK2<=191 : EXEC KILL_BLOCK : EXEC MOVE_PLAYER
6970     ELSE : NEWXY=0
6980   ENDIF : ENDIF : ENDIF : ENDIF
6990 ENDPROC
  
REM ********************
REM *** ADD_FUSE ***
REM ********************
7300 PROC ADD_FUSE
7310   POKE SC+XY+NEWXY,0
7320   POKE SC+XY+2*NEWXY,27
7330 ENDPROC

REM ********************
REM *** MOVE_BLOCK ***
REM ********************
7500 PROC MOVE_BLOCK
REM I need to move the Laser/POWER arrays to reflect where lasers go, as necessary 7530   IF (CHECK1>=28 AND CHECK1<=30) OR CHECK1=59

7510   POKE SC+XY+NEWXY,0
7520   POKE SC+XY+2*NEWXY,CHECK1

7530 ENDPROC


REM ********************
REM *** KILL_BLOCK ***
REM ********************
7600 PROC KILL_BLOCK
7610   POKE SC+XY+NEWXY,0
7620 ENDPROC


REM ********************
REM *** COMPLETE_STAGE ***
REM ********************
7700 PROC COMPLETE_STAGE  
7710   EXEC MOVE_PLAYER
7720 ENDPROC

REM ************************
REM  *** ATTRACT_MODE ***
REM ************************
7800 PROC ATTRACT_MODE
7810   POSITION 10,4:PRINT #6;"PRESS"
7820   POSITION 10,5:PRINT #6;"button"
7830   POSITION 10,6:PRINT #6;"TO START"
7840   WHILE STRIG(0)<>0:WEND
7850   POSITION 10,4:PRINT #6;"     "
7860   POSITION 10,5:PRINT #6;"      "
7870   POSITION 10,6:PRINT #6;"        "
7880   LEVEL = 1 : LIVES = 5 : STEPS = 0 : STARTTIME=TIME/60
7890 ENDPROC


REM ************************
REM  *** SETUP_PLAYFIELD ***
REM ************************
8000 PROC SETUP_PLAYFIELD
8010   GAMEOVER=0
8020   POSITION 1,0:PRINT #6;"\C5\D3\C3\C1\D0\C5"
8030   POSITION 1,2:PRINT #6;"stage"
8040   POSITION 1,5:PRINT #6;"steps"
8050   POSITION 1,8:PRINT #6;"clock"
8060   FOR I = 8 to 18
8070     POSITION I,0:PRINT #6;"\F7"
8080     POSITION I,11:PRINT #6;"\F7"
8090   NEXT I
8100   FOR I = 1 to 10
8110     POSITION 8,I:PRINT #6;"\F7"
8120     POSITION 9,I:PRINT #6;"         "
8130     POSITION 18,I:PRINT #6;"\F7"
8140   NEXT I
8150 ENDPROC

REM *******************
REM  *** INITIALIZE ***
REM *******************
8500 PROC INITIALIZE
REM    --- Move the top of memory back and set our memory addresses ---
8510   MEMTOP = PEEK(106)
8520   NEW_MEMTOP=MEMTOP-16
8530   POKE 106,NEW_MEMTOP
8540   GRAPHICS 2+16
8550   SC=DPEEK(88)
8560   CHRAM=NEW_MEMTOP
8580   CHROM=PEEK(756)
8590   POKE 756,CHRAM
8600   MOVE CHROM*256,CHRAM*256,1024

REM    --- Move game graphics into proper space in memory, in chunks to fit the characters being used
REM    --- MEMLOC = 2
8610   CS$="\7E\81\81\A5\7E\3C\7E\5A"
8620   MOVE ADR(CS$),CHRAM*256+(2)*8,8
REM    --- MEMLOC = 4 - 14
8630   CS$="\7E\A5\81\81\7E\3C\7E\5A\7E\81\A9\81\7E\38\7C\54\7E\81\95\81\7E\1C\3E\2A\E7\E3\F1\38\1C\8F\C7\E7\E7\C7\8F\1C\38\F1\E3\E7\AA\55\AA\55\AA\55\AA\55\E7\81\BD\24\24\BD\81\E7\3C\18\81\C3\E7\E7\E7\E7\E7\E7\E7\E7\E7\81\18\3C\FC\F8\F1\03\03\F1\F8\FC\3F\1F\8F\C0\C0\8F\1F\3F"
8640   MOVE ADR(CS$),CHRAM*256+(4)*8,88
REM    --- MEMLOC = 49
8650   CS$="\00\00\3C\3C\3C\3C\00\00"
8660   MOVE ADR(CS$),CHRAM*256+(49)*8,8
REM    --- MEMLOC = 26-30
8670   CS$="\FF\99\81\C3\C3\81\99\FF\FF\99\81\DB\DB\81\99\FF\00\7E\5A\5A\18\18\18\18\18\18\18\18\5A\42\7E\00\00\0E\02\FA\FA\02\0E\00"
8680   MOVE ADR(CS$),CHRAM*256+(26)*8,40
REM    --- MEMLOC = 54-63
8690   CS$="\E7\C3\99\BD\BD\AD\BD\BD\FB\FB\00\DF\DF\DF\00\FB\E7\C3\81\81\81\81\81\81\FF\E7\C3\C3\C3\C3\E7\FF\FF\FF\C3\81\81\C3\FF\FF\00\70\40\5F\5F\40\70\00\03\07\0E\1C\38\70\E0\C0\C0\E0\70\38\1C\0E\07\03\00\00\00\FF\FF\00\00\00\18\18\18\18\18\18\18\18"
8700   MOVE ADR(CS$),CHRAM*256+(54)*8,80

REM    --- Set colours:  upper=gray, lower=cyan, inverse upper = red/pink, inverse lower = brown ---
REM    --- these are different from the values in initialize because those represent what locate will return based on these values
8710   POKE 708, 8
8720   POKE 709, 132
8730   POKE 710, 66
8740   POKE 711, 244
8750 ENDPROC


REM *************************
REM *** STAGE INFORMATION ***
REM *************************
10001 LEVEL$="\04\D6\F6\10\1A\AB\31\AC\8A\33\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1D\97\AB\00\00\00\00\00\00\00\00\00\00\00\00" : RETURN




