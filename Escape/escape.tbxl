REM *********************************
REM *********************************
REM ESCAPE (or maybe Cosmic Cages?)
REM ---------------------------------
REM by Jason "8BIT 1337" Gruetzmacher
REM *********************************
REM *********************************

REM *********************
REM *** PROGRAM START ***
REM *********************
100 ESC=28 : UP=14 : LEFT=11 : DOWN=13 : RIGHT=7
110 PLAYER = 1 : DOOR=4 : LASER1=7 : FUSEBOX1=10 : FUSE1=13 : KEYHOLE1=16 : SI=18
130 DIM CS$(88) : DIM STAGE(SI) : DIM LIVES$(1)

150 EXEC INITIALIZE

REM *****************
REM *** GAME LOOP ***
REM *****************
REM Put code here for RESTORE 9000 to bring data statements back to level 1, and setup the 'Press button to start' text

REM *** BEGIN_STAGE ***
300 #BEGIN_STAGE
310 EXEC SETUP_PLAYFIELD
320 EXEC ATTRACT_MODE
350 FOR I = 0 to SI : READ A : STAGE(I)=A : NEXT I
360 POSITION 2,3 : PRINT #6;STAGE(0)
370 FOR I = 1 to SI-2 STEP 3
380   POSITION STAGE(I+1), STAGE(I+2) : PRINT #6;CHR$(STAGE(I))
390 NEXT I
400 XY=SC+STAGE(PLAYER+1)+20*STAGE(PLAYER+2)

REM *** GAME LOOP ***
410 NEWXY = 0 : FIRE=0 : STEPS = 0 : STARTTIME=TIME/60 : LIVES = 5

420 WHILE PEEK(764)<>ESC
430   CURRTIME = INT(TIME/60-STARTTIME)
440   EXEC UPDATE_PROGRESS
450   EXEC CHECK_LASERS
510   EXEC CHECK_TRIGGER : IF FIRE<>0 : EXEC FIRE_PORTAL : ENDIF
520   EXEC CHECK_JOYSTICK : IF NEWXY<>0 : EXEC CHECK_PLAYER : ENDIF
530   IF GAMEOVER=1 : EXIT : ENDIF

REM *** CLEAN UP ***
WEND
IF GAMEOVER=1 : GOTO BEGIN_STAGE : ENDIF
POKE 106,MEMTOP
GR.0
END

REM ************************
REM  *** UPDATE_PROGRESS ***
REM ************************
2000 PROC UPDATE_PROGRESS
2010   POSITION 2,9:PRINT #6;CURRTIME
2020   POSITION 2,6:PRINT #6;STEPS
2030   FOR I = 1 TO 6
2040     IF I<=LIVES : LIVES$="&" : ELSE : LIVES$=" " : ENDIF
2050     POSITION I,11:PRINT #6;LIVES$
2060   NEXT I
2070 ENDPROC

REM *********************
REM  *** CHECK_LASERS ***
REM *********************
2200 PROC CHECK_LASERS
2210   I=0
2220 ENDPROC

REM ***********************
REM   *** CHECK_TRIGGER ***
REM ***********************
5200 PROC CHECK_TRIGGER
5210   IF STRIG(0)=0
5220     IF STICK(0)=LEFT : FIRE=121
5230     ELSE : IF STICK(0)=RIGHT : FIRE=122
5240     ENDIF : ENDIF
5250   ENDIF
5290 ENDPROC

REM ********************
REM  *** FIRE_PORTAL ***
REM ********************
5500 PROC FIRE_PORTAL
5510   I=0
5520 ENDPROC

REM ***********************
REM  *** CHECK_JOYSTICK ***
REM ***********************
5800 PROC CHECK_JOYSTICK
5810   IF STICK(0)=UP : NEWXY = -20 : NEWP=4
5820     ELSE : IF STICK(0)=LEFT : NEWXY = -1 : NEWP=5
5830     ELSE : IF STICK(0)=DOWN : NEWXY = 20 : NEWP=2
5840     ELSE : IF STICK(0)=RIGHT : NEWXY = 1 : NEWP=5
5850   ENDIF : ENDIF : ENDIF : ENDIF
5860 ENDPROC

REM *******************
REM *** CHECK_PLAYER ***
REM *******************
6100 PROC CHECK_PLAYER
6130   CHECK1 = PEEK(SC+NEWXY)

6140   IF CHECK1=248 : EXEC COMPLETE_STAGE
6150     ELSE : IF CHECK1=0 : EXEC MOVE_PLAYER
6160     ELSE : IF CHECK1<=49 : EXEC PUSH_BLOCK
6170     ELSE : IF CHECK1<=58 : EXEC USE_PORTAL
6180     ELSE : IF CHECK1<=191 : EXEC LOSE_LIFE
6190     ELSE : NEWX=0 : NEWY=0
6200   ENDIF : ENDIF : ENDIF : ENDIF : ENDIF
6210 ENDPROC

REM *******************
REM *** MOVE_PLAYER ***
REM *******************
6300 PROC MOVE_PLAYER
6310   POKE SC+XY, 0
6320   POKE SC+NEWXY, NEWP
6340   XY=NEWXY : NEWXY=0
6350 ENDPROC

REM *****************
REM *** LOSE_LIFE ***
REM *****************
6400 PROC LOSE_LIFE
6410   LIVES = LIVES - 1
6430   POSITION 1,11 : PRINT #6;"@!#?@!"
6440   NEWXY=0
6450   IF LIVES = 0 : GAMEOVER = 1 : ENDIF
6460   WHILE STRIG(0)<>0:WEND
6470 ENDPROC

REM ******************
REM *** USE_PORTAL ***
REM ******************
6600 PROC ENTER_PORTAL
6610   I = 0
6620 ENDPROC

REM ******************
REM *** USE_PORTAL ***
REM ******************
6700 PROC USE_PORTAL
6710   I = 0
6720 ENDPROC

REM ******************
REM *** PUSH_BLOCK ***
REM ******************
6900 PROC PUSH_BLOCK
6920   CHECK2=PEEK(SC+2*NEWXY)

6930   IF CHECK2=0 : EXEC MOVE_BLOCK : EXEC MOVE_PLAYER
6940     ELSE : IF CHECK1=49 AND CHECK2=26 : EXEC ADD_FUSE : EXEC MOVE_PLAYER
6950     ELSE : IF CHECK2 =57 OR CHECK2 =58 : EXEC USE_PORTAL : EXEC MOVE_PLAYER
6960     ELSE : IF CHECK2>=137 AND CHECK2<=191 : EXEC KILL_BLOCK : EXEC MOVE_PLAYER
6970     ELSE : NEWXY=0
6980   ENDIF : ENDIF : ENDIF : ENDIF
6990 ENDPROC
  
REM ********************
REM *** ADD_FUSE ***
REM ********************
7300 PROC ADD_FUSE
7310   POKE SC+NEWXY,0
7320   POKE SC+2*NEWXY,27
7330 ENDPROC

REM ********************
REM *** MOVE_BLOCK ***
REM ********************
7500 PROC MOVE_BLOCK
7510   POKE SC+NEWXY,0
7520   POKE SC+2*NEWXY,CHECK1
7530 ENDPROC

REM ********************
REM *** KILL_BLOCK ***
REM ********************
7600 PROC KILL_BLOCK
7610   POKE SC+NEWXY,0
7620 ENDPROC


REM ********************
REM *** COMPLETE_STAGE ***
REM ********************
7700 PROC COMPLETE_STAGE  
7710   EXEC MOVE_PLAYER
7720 ENDPROC

REM ************************
REM  *** ATTRACT_MODE ***
REM ************************
7800 PROC ATTRACT_MODE
7810   POSITION 10,4:PRINT #6;"PRESS"
7820   POSITION 10,5:PRINT #6;"button"
7830   POSITION 10,6:PRINT #6;"TO START"
7840   WHILE STRIG(0)<>0:WEND
7850   POSITION 10,4:PRINT #6;"     "
7860   POSITION 10,5:PRINT #6;"      "
7870   POSITION 10,6:PRINT #6;"        "
7880 ENDPROC


REM ************************
REM  *** SETUP_PLAYFIELD ***
REM ************************
8000 PROC SETUP_PLAYFIELD
8010   GAMEOVER=0
8020   POSITION 1,0:PRINT #6;"\C5\D3\C3\C1\D0\C5"
8030   POSITION 1,2:PRINT #6;"stage"
8040   POSITION 1,5:PRINT #6;"steps"
8050   POSITION 1,8:PRINT #6;"clock"
8060   FOR I = 8 to 18
8070     POSITION I,0:PRINT #6;"\F7"
8080     POSITION I,11:PRINT #6;"\F7"
8090   NEXT I
8100   FOR I = 1 to 10
8110     POSITION 8,I:PRINT #6;"\F7"
8120     POSITION 9,I:PRINT #6;"         "
8130     POSITION 18,I:PRINT #6;"\F7"
8140   NEXT I
8150 ENDPROC

REM *******************
REM  *** INITIALIZE ***
REM *******************
8500 PROC INITIALIZE
REM    --- Move the top of memory back and set our memory addresses ---
8510   MEMTOP = PEEK(106)
8520   NEW_MEMTOP=MEMTOP-16
8530   POKE 106,NEW_MEMTOP
8540   GRAPHICS 2+16
8550   SC=DPEEK(88)
8555 position0,0:?#6;SC
8560   CHRAM=NEW_MEMTOP
8580   CHROM=PEEK(756)
8590   POKE 756,CHRAM
8600   MOVE CHROM*256,CHRAM*256,1024

REM    --- Move game graphics into proper space in memory, in chunks to fit the characters being used
REM    --- MEMLOC = 2
8610   CS$="\7E\81\81\A5\7E\3C\7E\5A"
8620   MOVE ADR(CS$),CHRAM*256+(2)*8,8
REM    --- MEMLOC = 4 - 14
8630   CS$="\7E\A5\81\81\7E\3C\7E\5A\7E\81\A9\81\7E\38\7C\54\7E\81\95\81\7E\1C\3E\2A\E7\E3\F1\38\1C\8F\C7\E7\E7\C7\8F\1C\38\F1\E3\E7\AA\55\AA\55\AA\55\AA\55\E7\81\BD\24\24\BD\81\E7\3C\18\81\C3\E7\E7\E7\E7\E7\E7\E7\E7\E7\81\18\3C\FC\F8\F1\03\03\F1\F8\FC\3F\1F\8F\C0\C0\8F\1F\3F"
8640   MOVE ADR(CS$),CHRAM*256+(4)*8,88
REM    --- MEMLOC = 49
8650   CS$="\00\00\3C\3C\3C\3C\00\00"
8660   MOVE ADR(CS$),CHRAM*256+(49)*8,8
REM    --- MEMLOC = 26-30
8670   CS$="\FF\99\81\C3\C3\81\99\FF\FF\99\81\DB\DB\81\99\FF\00\7E\5A\5A\18\18\18\18\18\18\18\18\5A\42\7E\00\00\0E\02\FA\FA\02\0E\00"
8680   MOVE ADR(CS$),CHRAM*256+(26)*8,40
REM    --- MEMLOC = 54-63
8690   CS$="\E7\C3\99\BD\BD\AD\BD\BD\FB\FB\00\DF\DF\DF\00\FB\E7\C3\81\81\81\81\81\81\FF\E7\C3\C3\C3\C3\E7\FF\FF\FF\C3\81\81\C3\FF\FF\00\70\40\5F\5F\40\70\00\03\07\0E\1C\38\70\E0\C0\C0\E0\70\38\1C\0E\07\03\00\00\00\FF\FF\00\00\00\18\18\18\18\18\18\18\18"
8700   MOVE ADR(CS$),CHRAM*256+(54)*8,80

REM   --- Set colours:  upper=gray, lower=cyan, inverse upper = red/pink, inverse lower = brown ---
REM   --- these are different from the values in initialize because those represent what locate will return based on these values
8710   POKE 708, 8
8720   POKE 709, 132
8730   POKE 710, 66
8740   POKE 711, 244
8750 ENDPROC


REM *************************
REM *** STAGE INFORMATION ***
REM *************************
REM   STAGE, PLAYER, DOOR, LASER/FUSEBOX/FUSE/KEYHOLE 0, LASER/FUSEBOX/FUSE/KEYHOLE 1, LASER/FUSEBOX/FUSE/KEYHOLE 2, LASER/FUSEBOX/FUSE/KEYHOLE 3, LASER/FUSEBOX/FUSE/KEYHOLE 4
9010 DATA 1 : REM STAGE
9011 DATA 36,14,10 : REM PLAYER
9012 DATA 246,16,0 : REM EXIT
9013 DATA 61,11,7,58,11,8,81,12,8,170,11,2 : REM LASER 0
9014 DATA 0,0,0,0,0,0,0,0,0,0,0,0 : REM LASER 1
9015 DATA 0,0,0,0,0,0,0,0,0,0,0,0 : REM LASER 2
9016 DATA 0,0,0,0,0,0,0,0,0,0,0,0 : REM LASER 3
9017 DATA 0,0,0,0,0,0,0,0,0,0,0,0 : REM LASER 4