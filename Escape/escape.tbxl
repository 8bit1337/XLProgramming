REM *********************************
REM *********************************
REM ESCAPE (or maybe Cosmic Cages?)
REM ---------------------------------
REM by Jason "8BIT 1337" Gruetzmacher
REM *********************************
REM *********************************

REM *********************
REM *** PROGRAM START ***
REM *********************
100 ESC=28 : UP=14 : LEFT=11 : DOWN=13 : RIGHT=7
105 RED=222 : BLUE=0 : GRAY=61 : BROWN=247
110 PLAYER = 1 : DOOR=4 : LASER1=7 : FUSEBOX1=10 : FUSE1=13 : KEYHOLE1=16 : SI=18
120 DIM CS$(88) : DIM STAGE(SI) : DIM L$(1)
130 EXEC INITIALIZE

REM *****************
REM *** GAME LOOP ***
REM *****************
REM Put code here for RESTORE 9000 to bring data statements back to level 1, and setup the 'Press button to start' text

REM *** BEGIN STAGE ***
140 EXEC SETUP_PLAYFIELD
340 FOR I = 0 to SI : READ A : STAGE(I)=A : NEXT I
350 POSITION 2,3 : PRINT #6;STAGE(0)
360 FOR I = 1 to SI-2 STEP 3
370   POSITION STAGE(I+1), STAGE(I+2) : PRINT #6;CHR$(STAGE(I))
380 NEXT I
385 X=STAGE(PLAYER+1):Y=STAGE(PLAYER+2)

REM *** GAME LOOP ***
390 NEWX=0 : NEWY=0 : FIRE=0 : STEPS = 0 : STARTTIME=TIME/60 : LIVES = 5

460 WHILE PEEK(764)<>ESC
470   CURRTIME = INT(TIME/60-STARTTIME)
480   EXEC UPDATE_PROGRESS
490   EXEC CHECK_TRIGGER : IF FIRE<>0 : EXEC FIRE_PORTAL : ENDIF
510   EXEC CHECK_JOYSTICK : IF NEWX<>0 OR NEWY<>0 : EXEC MOVE_PLAYER : ENDIF

REM *** CLEAN UP ***
WEND
POKE 106,MEMTOP
GR.0
END

REM ************************
REM  *** UPDATE_PROGRESS ***
REM ************************
5000 PROC UPDATE_PROGRESS
5010   POSITION 2,9:PRINT #6;CURRTIME
5020   POSITION 2,6:PRINT #6;STEPS
5030   FOR I = 1 TO 6
5040     IF I<=LIVES : L$="&" : ELSE : L$=" " : ENDIF
5050     POSITION I,11:PRINT #6;L$
5060   NEXT I
5070 ENDPROC

REM ***********************
REM   *** CHECK_TRIGGER ***
REM ***********************
5200 PROC CHECK_TRIGGER
5210   IF STRIG(0)=0
5220     IF STICK(0)=LEFT
5230       FIRE=121 : ENDIF
5250       IF STICK(0)=RIGHT
5260         FIRE=122 : ENDIF
5280   ENDIF
5290 ENDPROC

REM ********************
REM  *** FIRE_PORTAL ***
REM ********************
5500 PROC FIRE_PORTAL
5510   I=0
5520 ENDPROC

REM ***********************
REM  *** CHECK_JOYSTICK ***
REM ***********************
5800 PROC CHECK_JOYSTICK
5810   IF STICK(0)=UP
5820     NEWY=-1 : STAGE(PLAYER)=36 : ENDIF
5830   IF STICK(0)=LEFT
5840     NEWX=-1 : STAGE(PLAYER)=37 : ENDIF
5850   IF STICK(0)=DOWN
5860     NEWY=1 : STAGE(PLAYER)=34 : ENDIF
5870   IF STICK(0)=RIGHT
5880     NEWX=1 : STAGE(PLAYER)=38 : ENDIF
5890 ENDPROC

REM *******************
REM *** MOVE_PLAYER ***
REM *******************
6100 PROC MOVE_PLAYER
6110   X1=(X+NEWX) : Y1=(Y+NEWY)
6130   CHECK1 = PEEK(SC+(20*Y1+X1))

6140   LOCATE X1,Y1, C
6145 position 0,1:PRINT#6;C

6150   IF C=RED : EXEC LOSE_LIFE : ENDIF
6160   IF C=BLUE : EXEC USE_PORTAL : ENDIF
6170   IF C=GRAY : EXEC PUSH_BLOCK : ENDIF
6180   IF C=BROWN : NEWX=0 : NEWY=0 : ENDIF

6190     POSITION X,Y : PRINT #6;" "
6200     X=X+NEWX : Y=Y+NEWY
6210     POSITION X,Y : PRINT #6;CHR$(STAGE(PLAYER))
6220     NEWX=0 : NEWY=0
REM   -- Stage Complete! --
REM  IF NVAL=56 : stage completed!
     
REM   -- Can't Move Here --
REM 700   IF NVAL>=33 AND NVAL<=122
REM 710     NEWY=Y : NEWX = X : MOVED = 0
REM 720   ENDIF  
6270 ENDPROC

REM *****************
REM *** LOSE_LIFE ***
REM *****************
6400 PROC LOSE_LIFE
6410   LIVES = LIVES - 1
6420   IF X>14 : X=14 : ENDIF
6430   POSITION 1,11 : PRINT #6;"@!#?@!"
6440   NEWX=0 : NEWY=0
6450   WHILE STRIG(0)<>0:WEND
6460 ENDPROC

REM ******************
REM *** USE_PORTAL ***
REM ******************
6600 PROC USE_PORTAL
6610   I = 0
6620 ENDPROC

REM ******************
REM *** PUSH_BLOCK ***
REM ******************
6900 PROC PUSH_BLOCK
6910   X2=(X1+NEWX) : Y2=(Y1+NEWY)
6920   CHECK2=PEEK(SC+(20*Y2+X2))
6930   LOCATE X2,Y2,C2

6930   IF CHECK2 >= 247 AND CHECK2 <= 248
6940     NEWX=0 : NEWY=0 : REM STOP THE MOVE
6950   ELSE
6960     IF C2=RED
6970       EXEC LOSE_LIFE
6980     ELSE
6990       IF C2=BLUE
7010         EXEC USE_PORTAL
7020       ELSE
7030         IF C=GRAY
7040           EXEC MERGE_BLOCKS
7050         ELSE
81 = fuse, 58 = fusebox
7060           CHECK_ADDR = SC+(20*NEWY+NEWX)
7070           CHECK_VAL = PEEK(CHECK_ADDR)
7080         ENDIF
7090       ENDIF
7100     ENDIF
7110   ENDIF
7120 ENDPROC
  
REM ********************
REM *** MERGE_BLOCKS ***
REM ********************
7300 PROC MERGE_BLOCKS  
7310   I=0
7320 ENDPROC

REM ************************
REM  *** SETUP_PLAYFIELD ***
REM ************************
7600 PROC SETUP_PLAYFIELD
7610   POSITION 1,0:PRINT #6;"\C5\D3\C3\C1\D0\C5"
7620   POSITION 1,2:PRINT #6;"stage"
7630   POSITION 1,5:PRINT #6;"steps"
7640   POSITION 1,8:PRINT #6;"clock"
7650   FOR I = 8 to 18
7660     POSITION I,0:PRINT #6;"\F7"
7670     POSITION I,11:PRINT #6;"\F7"
7680   NEXT I
7690   FOR I = 1 to 10
7700     POSITION 8,I:PRINT #6;"\F7"
7710     POSITION 18,I:PRINT #6;"\F7"
7720   NEXT I
7730 ENDPROC

REM *******************
REM  *** INITIALIZE ***
REM *******************
8000 PROC INITIALIZE
REM    --- Move the top of memory back and set our memory addresses ---
8010   MEMTOP = PEEK(106)
8020   NEW_MEMTOP=MEMTOP-16
8030   POKE 106,NEW_MEMTOP
8040   GRAPHICS 2+16
8050   SC=DPEEK(88)
8060   CHRAM=NEW_MEMTOP
8080   CHROM=PEEK(756)
8090   POKE 756,CHRAM
8100   MOVE CHROM*256,CHRAM*256,1024

REM    --- Move game graphics into proper space in memory, in chunks to fit the characters being used
REM    --- MEMLOC = 2
8110   CS$="\7E\81\81\A5\7E\3C\7E\5A"
8120   MOVE ADR(CS$),CHRAM*256+(2)*8,8
REM    --- MEMLOC = 4 - 14
8130   CS$="\7E\A5\81\81\7E\3C\7E\5A\7E\81\A9\81\7E\38\7C\54\7E\81\95\81\7E\1C\3E\2A\E7\E3\F1\38\1C\8F\C7\E7\E7\C7\8F\1C\38\F1\E3\E7\03\07\0E\1C\38\70\E0\C0\C0\E0\70\38\1C\0E\07\03\3C\18\81\C3\E7\E7\E7\E7\E7\E7\E7\E7\E7\81\18\3C\FC\F8\F1\03\03\F1\F8\FC\3F\1F\8F\C0\C0\8F\1F\3F"
8140   MOVE ADR(CS$),CHRAM*256+(4)*8,88
REM    --- MEMLOC = 49
8150   CS$="\00\00\3C\3C\3C\3C\00\00"
8160   MOVE ADR(CS$),CHRAM*256+(49)*8,8
REM    --- MEMLOC = 26-30
8170   CS$="\FF\99\81\C3\C3\81\99\FF\FF\99\81\DB\DB\81\99\FF\00\7E\5A\5A\18\18\18\18\18\18\18\18\5A\42\7E\00\00\0E\02\FA\FA\02\0E\00"
8180   MOVE ADR(CS$),CHRAM*256+(26)*8,40
REM    --- MEMLOC = 54-63
8190   CS$="\E7\C3\99\BD\BD\AD\BD\BD\FB\FB\00\DF\DF\DF\00\FB\E7\C3\81\81\81\81\81\81\FF\E7\C3\C3\C3\C3\E7\FF\FF\FF\C3\81\81\C3\FF\FF\00\00\00\FF\FF\00\00\00\00\70\40\5F\5F\40\70\00\AA\55\AA\55\AA\55\AA\55\E7\81\BD\24\24\BD\81\E7\18\18\18\18\18\18\18\18"
8200   MOVE ADR(CS$),CHRAM*256+(54)*8,80

REM   --- Set colours:  upper=gray, lower=cyan, inverse upper = red/pink, inverse lower = brown ---
REM   --- these are different from the values in initialize because those represent what locate will return based on these values
8210   POKE 708, 8
8220   POKE 709, 132
8230   POKE 710, 66
8240   POKE 711, 244
8250 ENDPROC


REM *************************
REM *** STAGE INFORMATION ***
REM *************************
REM   STAGE,PLAYER,DOOR,LASER1,FUSEBOX1,FUSE1,KEYHOLE1
REM 9001 DATA 1,1,14,10,214,16,0,16,11,7,13,11,8,12,12,8,21,11,2
9001 DATA 1,36,14,10,246,16,0,61,11,7,58,11,8,81,12,8,222,11,2