REM *** VARIABLE NAMES ***
REM --- ESC: value returned when ESC key is pressed
REM --- UP/LEFT/DOWN/RIGHT: values returned when joystick is pressed in corresponding direction
REM --- LS: The width and height of each level
REM --- CS: The number of spots of memory we need for our character set
REM --- CS$: Character Set graphics, as a long string of ATASCII characters to represent hex codes
REM --- P$: the character representing the player - W/A/X/D, depending on whether it's looking up/left/down/right
REM --- L$: a string to represent the current level
REM --- MEMTOP:  the top of memory prior to making any changes
REM --- NEW_MEMTOP:  the new top of memory after we've lowered it to store our character set and music
REM --- SC:  the first address that stores the screen graphics
REM --- CHRAM:  the memory location for our custom character graphics
REM --- LVRAM
REM --- CHROM:  the memory location in ROM where character graphics are stored
REM --- UADDR/UVAL: the memory address and value for the character underneath the player, so that we can restore it after player moves
REM --- X/Y/NEWX/NEWY:  the location in the LSxLS grid where the player is/will move to next

100 ESC=28 : UP=14 : LEFT=11 : DOWN=13 : RIGHT=7 : LS=10 : CS=208
110 DIM CS$(CS) : DIM P$(1) : DIM L$(LS*LS)
120 CS$(001,104)="\7E\81\A9\81\7E\38\7C\54\00\00\18\3C\3C\18\00\00\00\7E\42\52\4A\42\7E\00\7E\81\95\81\7E\1C\3E\2A\00\7C\40\78\40\40\7C\00\FF\FF\FF\FF\FF\FF\FF\FF\00\1C\04\F4\F4\04\1C\00\00\00\00\FF\FF\00\00\00\00\7C\10\10\10\10\7C\00\00\00\7E\42\5A\18\18\18\00\38\20\2F\2F\20\38\00\18\24\42\42\42\42\24\18\00\42\66\5A\42\42\42\00"
130 CS$(105,208)="\18\3C\7E\FF\FF\7E\3C\18\18\24\42\81\81\42\24\18\00\78\44\44\78\40\40\00\E7\81\BD\24\24\BD\81\E7\00\3C\42\81\81\42\3C\00\00\3C\40\3C\02\42\3C\00\00\7C\10\10\10\10\10\00\FB\FB\00\DF\DF\DF\00\FB\18\18\18\18\18\18\18\18\7E\A5\81\81\7E\3C\7E\5A\7E\81\81\A5\7E\3C\7E\5A\18\18\18\5A\42\7E\00\00\02\11\88\44\22\10\88\44"

REM *** Move the top of memory back, so we have a place to can store our levels and character set ***
135 MEMTOP = PEEK(106)
140 NEW_MEMTOP=MEMTOP-16
150 POKE 106,NEW_MEMTOP
160 GRAPHICS 2+16

REM *** Create our new character set ***
165 SC=DPEEK(88)
170 CHRAM=NEW_MEMTOP
180 LVRAM=NEW_MEMTOP+4
190 CHROM=PEEK(756)
200 POKE 756,CHRAM
210 MOVE CHROM*256,CHRAM*256,1024
220 MOVE ADR(CS$),CHRAM*256+(65-32)*8,CS

REM *** Set colours:  upper=gray, lower=brown, inverse upper = cyan, inverse lower = pink ***
230 POKE 708, 8
240 POKE 709, 244
250 POKE 710, 132
260 POKE 711, 70

REM *** Setup the left part of the playfield AaAa = \41\61\C1\E1 ***
270 POSITION 2,2:PRINT #6;"test"
280 POSITION 4,3:PRINT #6;"0"
290 POSITION 2,5:PRINT #6;"step"
300 POSITION 4,6:PRINT #6;"0"
310 POSITION 2,8:PRINT #6;"time"
320 POSITION 4,9:PRINT #6;"0"

REM *** LEVEL 1 ***
330 L = 1 : P$ = "W" : X = 5 : Y=9
340 L$="uuuuufNuuuu  \F1     uu        urunu        uf        uu  C     fu  \F6     uu  \F6     uu  \F9     uuuuufuuuuu"
350 FOR I = 1 TO LS
360   POSITION 9,I:PRINT #6;L$(LS*(I-1)+1,LS*I)
370 NEXT I
380 POSITION 4,3:PRINT #6;L

REM *** GAME LOOP ***
390 NEWX = X : NEWY = Y : MOVED = 1 : FIRST = 1 : STARTTIME = TIME/60
400 EXEC MOVE_PLAYER

450 WHILE PEEK(764)<>ESC
460   CURRTIME = INT(TIME/60-STARTTIME)
470   IF CURRTIME < 10 : Z = 4 : ELSE : IF CURRTIME < 1000: Z = 3 : ELSE : Z=6 : ENDIF : ENDIF
480   POSITION Z,9:PRINT #6;CURRTIME

490   IF STICK(0)=UP
500     MOVED=1 : NEWY=Y-1 : P$="W" : ENDIF
510   IF STICK(0)=LEFT
520     MOVED=1 : NEWX=X-1 : P$="A" : ENDIF
540   IF STICK(0)=DOWN
550     MOVED=1 : NEWY=Y+1 : P$="X" : ENDIF
570   IF STICK(0)=RIGHT
580     MOVED=1 : NEWX=X+1 : P$="D" : ENDIF
  
590   IF NEWX < 1    : NEWX=1    : MOVED=0 : ENDIF
600   IF NEWX > LS   : NEWX=LS   : MOVED=0 : ENDIF
610   IF NEWY < 1    : NEWY=1    : MOVED=0 : ENDIF
620   IF NEWY > LS   : NEWY=LS   : MOVED=0 : ENDIF
  
630   EXEC MOVE_PLAYER

WEND
POKE 106,MEMTOP
GR.0
END

10000 PROC MOVE_PLAYER
10010   IF MOVED = 1
10020     IF FIRST = 0 : REMark -- Print the old character in the spot the player is moving from
10030       POKE UADDR,UVAL
10040       STEPS = STEPS + 1
10050       IF STEPS < 10 : Z = 4 : ELSE : IF STEPS < 1000: Z = 3 : ELSE : Z=6 : ENDIF : ENDIF
10060       POSITION Z,6:PRINT #6;STEPS
10070     ELSE
10080       FIRST = 0
10090     ENDIF

10099     REM -- Store whatever is currently at NEWX/NEWY in U$ so that we can re-show it later
10100     UADDR = SC+(20*NEWY+NEWX+8)
10110     UVAL = PEEK(UADDR)

10119     REM -- Print the appropriate player graphic at NEWX/NEWY
10120     POSITION NEWX+8,NEWY : PRINT #6;P$
10130     X=NEWX:Y=NEWY

10160     MOVED = 0
10170   ENDIF
10180 ENDPROC


REM *** LEVEL 1 NEW ***
REM DIM B$(1)  : REM The default border style, f or u
REM DIM L1$(3) : REM stores the type of laser base, and where it's located
REM DIM P$(1)  : REM an array to store what exists under the player
REM B$="u"
REM P=94
REM D=6
REM L1$="\F983":REM Laser pointing up, at position 82


REM *** Things I think I can do to make levels easier to build ***
REM Default outline = f or u
REM Just place objects through graphics
REM Variable to track where player starts, needs to keep track of what is under him at start
REM Variable specifically for lasers.  Limit how many there are.
REM Lasers should have specific functions:  open doors, create pf spots, eliminate hazards


